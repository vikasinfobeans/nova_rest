<?php

namespace RestBundle\Repository;

/**
 * TopSinglesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TopSinglesRepository extends \Doctrine\ORM\EntityRepository
{
	//	Get All Top Singles
    public function getTopSingles($territory)
    {	
        $topSinglesList = $this->getTopSinglesOfTerritory($territory);

        if(count($topSinglesList)>0){
        	// Get All ProdId & ProviderTypes
			$allProdIdsAndProviderType		=	$this->getProdIdAndProviderType($topSinglesList);

			if(!empty($allProdIdsAndProviderType)){
				 $topSinglesList = $this->getTopSinglesByProdIdAndProviderType($territory, $allProdIdsAndProviderType);
			}
			
        }

        return $topSinglesList;
    }

    //	Get Top Singles by Territory
    public function getTopSinglesOfTerritory($territory)
    {		
        $language = 'EN';
        $limit = 10;
        $query = $this->createQueryBuilder('ts')
                ->where('ts.territory = :territory')
                ->andWhere('ts.language= :language')
                ->setParameter('territory',$territory)
                ->setParameter('language',$language)
                ->orderBy('ts.sortid', 'ASC')
                ->setMaxResults( $limit )
                ->getQuery();

        $topSinglesList = $query->getResult();

        return $topSinglesList;
    }

    //	Get ProdId & ProviderType
    public function getProdIdAndProviderType($topSinglesList)
    {

    	$ids = array();
        $ids_provider_type = array();
        $main_array =   array();

        foreach ($topSinglesList as $k => $v)
        {            	
            if ($v->getProdId() != 0)
            {
                $ids[]  = $v->getProdId();
                $ids_provider_type[] = "'".$v->getProviderType()."'";
            }
        }

        $main_array['id'] = $ids;
        $main_array['ids_provider_type'] = $ids_provider_type;
        
        return $main_array;
    } 

    //	Get Top Singles of Territory
    public function getTopSinglesByProdIdAndProviderType($territory, $allProdIdsAndProviderType)
    {		
        $limit    = 5;
        $offset   = 0;
        $limit    = 5;

        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select("S.prodid, S.referenceid, S.title, S.artisttext, S.songtitle, S.advisory, S.sampleDuration, S.fulllengthDuration, S.providerType, S.fulllengthSaveasname, S.sampleSaveasname, S.cdnpath, C.territory, C.salesdate, C.streamingsalesdate, C.streamingstatus, C.downloadstatus, P.pid,
A.prodid, A.providerType, G.genre, TS.sortid")                
                ->from("RestBundle:Songs", "S")
                ->Join("RestBundle:TopSingles", "TS", "WITH", "TS.prodId = S.prodid AND TS.territory = '".$territory."'")
                ->leftJoin("RestBundle:Genre", "G", "WITH", "G.prodid = S.prodid  AND G.providerType = S.providerType")
                ->Join("RestBundle:".ucwords(strtolower($territory))."Countries", "C", "WITH", "C.prodid = S.prodid  AND C.territory='".$territory."' AND C.downloadstatus = '1' AND (S.providerType = C.providerType) AND (C.salesdate != '') AND (C.salesdate < '".date('Y-m-d')."')")
                ->leftJoin("RestBundle:Product", "P", "WITH", "P.prodid = S.prodid AND S.providerType = P.providerType")
                ->Join("RestBundle:Albums", "A", "WITH", "A.prodid = S.referenceid")    
                ->Where("S.fulllengthSaveasname != '' and S.cdnpath != '' and S.downloadstatus = '0'")
                ->andWhere('S.prodid IN ('.implode(", ", $allProdIdsAndProviderType['id']).')')            
                ->andWhere('S.providerType IN ('.implode(", ", $allProdIdsAndProviderType['ids_provider_type']).')')         
                ->groupBy('S.prodid')
                ->orderBy('TS.sortid', 'DESC')
                ->setFirstResult( $offset )
                ->setMaxResults( $limit );               
        
        #$kk = $query->getQuery()->getSQL(); echo $kk; die;
        $topSinglesList = $query->getQuery()->getResult();

        return $topSinglesList;
    }


}
