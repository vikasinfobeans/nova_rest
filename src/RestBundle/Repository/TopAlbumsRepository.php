<?php

namespace RestBundle\Repository;

/**
 * TopAlbumsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TopAlbumsRepository extends \Doctrine\ORM\EntityRepository
{
    public function getTopAlbumsList($territory)
    {
        $language = 'EN';
        $limit = 5;
        $query = $this->createQueryBuilder('TA')
                ->where('TA.territory = :territory')
                ->andWhere('TA.language= :language')
                ->setParameter('territory',$territory)
                ->setParameter('language',$language)
                ->orderBy('TA.sortid', 'ASC')
                ->setMaxResults( $limit )
                ->getQuery();

        $topAlbumsList = $query->getResult();

        return $topAlbumsList;
    }
    /*Return the all Listed territory*/
    public function getAllTerritory()
    {
        $allTerritory = array('au','bm','ca','de','gb','ie','ku','us','nz');
        return $allTerritory;
    }

    /*return idsProviderType using albums*/
    public function getProviderType($topAlbumsList){
        $idsProviderType =array();
        $id = array();
        $type = array();
        foreach ($topAlbumsList as $topAlbum) {
            if ($topAlbum->getAlbum() != 0) {
                if (empty($idsProviderType)) {
                    $id[] = $topAlbum->getAlbum();
                    $type[] = "'" . $topAlbum->getProviderType() . "'";
                }
            }
        }
        $idsProviderType = array('id'=>$id,'type'=>$type);

        return $idsProviderType;
    }
    /*Get Image Cdn Url Path*/

    function artworkToken($uri)
    {
          $gen = '5';
          $key = 'LibrariesrockwithFreegalmusic.com!';

          // add beginning forward slash to the uri
          $uri = '/' . $uri;

          // generate the token
          $hmac = hash_hmac("sha1", $uri, $key, FALSE);

          // format the hash
          $hash = sprintf("%1.1s%20.20s", $gen, $hmac);

          // append the hash to the uri
          $uri .= "?token=$hash";

          // return the token
          return $uri;
    }

    public function getAlbumSongsNew($prodId, $provider, $territory)
    {
            $countryPrefix  = $this->getCountryPrefix($territory);
            $Album          = $this->getEntityManager()->getRepository('RestBundle:Albums');
            $albumData      = $Album->findSongsForAlbum($prodId, $provider);
            $albumSongs     = array();

            if (!empty($albumData)) {
                $Song = $this->getEntityManager()->getRepository('RestBundle:Songs');

                foreach ($albumData as $album) {
                    $albumSongs[$album['prodid']] = $Song->getSongDetails($album['prodid'], $provider, $territory);
                }
            }

            foreach ($albumSongs as $k => $albumSong) {
                foreach ($albumSong as $key => $value) {
                    $albumSongs[$k][$key]['CdnPath'] = $value['cdnpath'];
                    $albumSongs[$k][$key]['SaveAsName'] = $value['sampleSaveasname'];
                    $albumSongs[$k][$key]['FullLength_Duration'] = $value['fulllengthDuration'];

                    unset($albumSongs[$k][$key]['sampleDuration']);
                    unset($albumSongs[$k][$key]['fulllengthDuration']);
                    unset($albumSongs[$k][$key]['sequenceNumber']);
                    unset($albumSongs[$k][$key]['title']);
                    unset($albumSongs[$k][$key]['genre']);
                    unset($albumSongs[$k][$key]['country']);
                }
            }
            return $albumSongs;
        }

        /**
        * Function Name : getCountryPrefix
        * Function Description : This function is used to get the country prefix
        */
        public function getCountryPrefix($territory)
        {
            $countryPrefix = strtolower($territory) . "_";
            return $countryPrefix;
        }


}
